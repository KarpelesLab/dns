// Code generated by "stringer -type=Type"; DO NOT EDIT.

package dnsmsg

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[A-1]
	_ = x[NS-2]
	_ = x[MD-3]
	_ = x[MF-4]
	_ = x[CNAME-5]
	_ = x[SOA-6]
	_ = x[MB-7]
	_ = x[MG-8]
	_ = x[MR-9]
	_ = x[NULL-10]
	_ = x[WKS-11]
	_ = x[PTR-12]
	_ = x[HINFO-13]
	_ = x[MINFO-14]
	_ = x[MX-15]
	_ = x[TXT-16]
	_ = x[RP-17]
	_ = x[AFSDB-18]
	_ = x[SIG-24]
	_ = x[KEY-25]
	_ = x[AAAA-28]
	_ = x[LOC-29]
	_ = x[SRV-33]
	_ = x[NAPTR-35]
	_ = x[KX-36]
	_ = x[CERT-37]
	_ = x[DNAME-39]
	_ = x[OPT-41]
	_ = x[APL-42]
	_ = x[DS-43]
	_ = x[SSHFP-44]
	_ = x[PSECKEY-45]
	_ = x[RRSIG-46]
	_ = x[NSEC-47]
	_ = x[DNSKEY-48]
	_ = x[DHCID-49]
	_ = x[NSEC3-50]
	_ = x[NSEC3PARAM-51]
	_ = x[TLSA-52]
	_ = x[SMIMEA-53]
	_ = x[HIP-55]
	_ = x[CDS-59]
	_ = x[CDNSKEY-60]
	_ = x[OPENPGPKEY-61]
	_ = x[CSYNC-62]
	_ = x[ZONEMD-63]
	_ = x[TKEY-249]
	_ = x[TSIG-250]
	_ = x[IXFR-251]
	_ = x[AXFR-252]
	_ = x[MAILB-253]
	_ = x[MAILA-254]
	_ = x[ANY-255]
	_ = x[URI-256]
	_ = x[CAA-257]
	_ = x[TA-32768]
	_ = x[DLV-32769]
}

const _Type_name = "ANSMDMFCNAMESOAMBMGMRNULLWKSPTRHINFOMINFOMXTXTRPAFSDBSIGKEYAAAALOCSRVNAPTRKXCERTDNAMEOPTAPLDSSSHFPPSECKEYRRSIGNSECDNSKEYDHCIDNSEC3NSEC3PARAMTLSASMIMEAHIPCDSCDNSKEYOPENPGPKEYCSYNCZONEMDTKEYTSIGIXFRAXFRMAILBMAILAANYURICAATADLV"

var _Type_map = map[Type]string{
	1:     _Type_name[0:1],
	2:     _Type_name[1:3],
	3:     _Type_name[3:5],
	4:     _Type_name[5:7],
	5:     _Type_name[7:12],
	6:     _Type_name[12:15],
	7:     _Type_name[15:17],
	8:     _Type_name[17:19],
	9:     _Type_name[19:21],
	10:    _Type_name[21:25],
	11:    _Type_name[25:28],
	12:    _Type_name[28:31],
	13:    _Type_name[31:36],
	14:    _Type_name[36:41],
	15:    _Type_name[41:43],
	16:    _Type_name[43:46],
	17:    _Type_name[46:48],
	18:    _Type_name[48:53],
	24:    _Type_name[53:56],
	25:    _Type_name[56:59],
	28:    _Type_name[59:63],
	29:    _Type_name[63:66],
	33:    _Type_name[66:69],
	35:    _Type_name[69:74],
	36:    _Type_name[74:76],
	37:    _Type_name[76:80],
	39:    _Type_name[80:85],
	41:    _Type_name[85:88],
	42:    _Type_name[88:91],
	43:    _Type_name[91:93],
	44:    _Type_name[93:98],
	45:    _Type_name[98:105],
	46:    _Type_name[105:110],
	47:    _Type_name[110:114],
	48:    _Type_name[114:120],
	49:    _Type_name[120:125],
	50:    _Type_name[125:130],
	51:    _Type_name[130:140],
	52:    _Type_name[140:144],
	53:    _Type_name[144:150],
	55:    _Type_name[150:153],
	59:    _Type_name[153:156],
	60:    _Type_name[156:163],
	61:    _Type_name[163:173],
	62:    _Type_name[173:178],
	63:    _Type_name[178:184],
	249:   _Type_name[184:188],
	250:   _Type_name[188:192],
	251:   _Type_name[192:196],
	252:   _Type_name[196:200],
	253:   _Type_name[200:205],
	254:   _Type_name[205:210],
	255:   _Type_name[210:213],
	256:   _Type_name[213:216],
	257:   _Type_name[216:219],
	32768: _Type_name[219:221],
	32769: _Type_name[221:224],
}

func (i Type) String() string {
	if str, ok := _Type_map[i]; ok {
		return str
	}
	return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
}
